# Copyright 2017 National Renewable Energy Laboratory. This software
# is released under the license detailed in the file, LICENSE, which
# is located in the top-level directory structure.

# ========================================================================
#
# Imports
#
# ========================================================================
import os

import pygame

import windcraft.colors as colors
import windcraft.fonts as fonts


# ========================================================================
#
# Class definitions
#
# ========================================================================
class Text:
    """This class displays the turbine text."""

    def __init__(self):
        """Constructor for Text."""
        self.colors = colors.Colors()
        self.fonts = fonts.Fonts()
        self.yoffset = 0.03 * pygame.display.get_surface().get_height()
        art_dir = os.path.join(
            os.path.dirname(__file__),
            "art",
        )
        bulb_files = [
            os.path.join(art_dir, fname) for fname in ["bulbon.png", "bulboff.png"]
        ]
        self.bulb_size = 30
        self.bulb_images = [pygame.image.load(fname) for fname in bulb_files]
        self.bulb_images = [
            pygame.transform.scale(image, (self.bulb_size, self.bulb_size))
            for image in self.bulb_images
        ]

    def display(self, screen, num_turbines, max_turbines, power, ideal_power):
        """Display the text on the screen.

        :param screen: pygame screen
        :type screen: screen
        :param num_turbines: number of turbines in farm
        :type num_turbines: int
        :param max_turbines: maximum number of turbines in farm
        :type max_turbines: int
        :param power: power generated by the farm
        :type power: float
        """

        # Title
        xstart = 0.5 * pygame.display.get_surface().get_width()
        ystart = 0.04 * pygame.display.get_surface().get_height()

        text = self.fonts.types["large"].render(
            "Build turbines to maximize power!", True, self.colors.black
        )
        textpos = text.get_rect(centerx=xstart, top=ystart)
        screen.blit(text, textpos)

        # # Counter
        # xstart = 0.01 * pygame.display.get_surface().get_width()
        # ystart = 0.12 * pygame.display.get_surface().get_height()
        # text = self.fonts.types['medium'].render(
        #     "Turbines in farm: {0:d}".format(num_turbines), True, self.colors.black)
        # textpos = text.get_rect(left=xstart,
        #                         top=ystart)
        # screen.blit(text, textpos)

        # if num_turbines >= max_turbines:
        #     text = self.fonts.types['medium'].render("All turbines placed!",
        #                                              True,
        #                                              self.colors.black)
        #     screen.blit(text, [textpos[0], textpos[1] + self.yoffset])

        # Power
        xstart = 0.5 * pygame.display.get_surface().get_width()
        ystart = 0.10 * pygame.display.get_surface().get_height()
        text = self.fonts.types["medium"].render(
            "Power produced : ",
            True,
            self.colors.black,
        )
        textpos = text.get_rect(centerx=xstart, top=ystart)
        screen.blit(text, textpos)

        num_bulbs = 10
        scale_factor = 100
        percent = 100 * power * scale_factor / ideal_power
        bulb_spacing = self.bulb_size
        xstart = 0.3 * pygame.display.get_surface().get_width()
        for i in range(num_bulbs):
            if percent >= (i + 1) * 10:
                bulb_img = self.bulb_images[0]
            else:
                bulb_img = self.bulb_images[1]
            screen.blit(
                bulb_img,
                (xstart + i * bulb_spacing, textpos.top + bulb_spacing - 8),
            )

        # Instructions
        xstart = 0.97 * pygame.display.get_surface().get_width()
        ystart = 0.9 * pygame.display.get_surface().get_height()
        control_texts = [
            "[u] to undo ",
            "[r] to reset",
            "[q] to quit ",
        ]
        for i, control_text in enumerate(control_texts):
            text = self.fonts.types["medium"].render(
                control_text, True, self.colors.black
            )
            textpos = text.get_rect(right=xstart, bottom=ystart)
            screen.blit(text, [textpos[0], textpos[1] + i * self.yoffset])
