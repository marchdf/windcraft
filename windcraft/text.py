# Copyright 2017 National Renewable Energy Laboratory. This software
# is released under the license detailed in the file, LICENSE, which
# is located in the top-level directory structure.

# ========================================================================
#
# Imports
#
# ========================================================================
import pygame
import windcraft.colors as colors
import windcraft.fonts as fonts


# ========================================================================
#
# Class definitions
#
# ========================================================================
class Text():
    """This class displays the turbine text."""

    def __init__(self):
        """Constructor for Text."""
        self.colors = colors.Colors()
        self.fonts = fonts.Fonts()
        self.yoffset = 0.03 * pygame.display.get_surface().get_height()

    def display(self, screen, num_turbines, max_turbines, power):
        """Display the text on the screen.

        :param screen: pygame screen
        :type screen: screen
        :param num_turbines: number of turbines in farm
        :type num_turbines: int
        :param max_turbines: maximum number of turbines in farm
        :type max_turbines: int
        :param power: power generated by the farm
        :type power: float
        """

        # Title
        xstart = 0.5 * pygame.display.get_surface().get_width()
        ystart = 0.04 * pygame.display.get_surface().get_height()

        text = self.fonts.types['large'].render(
            "Build turbines to maximize power!", True, self.colors.black)
        textpos = text.get_rect(centerx=xstart,
                                top=ystart)
        screen.blit(text, textpos)

        # # Counter
        # xstart = 0.01 * pygame.display.get_surface().get_width()
        # ystart = 0.12 * pygame.display.get_surface().get_height()
        # text = self.fonts.types['medium'].render(
        #     "Turbines in farm: {0:d}".format(num_turbines), True, self.colors.black)
        # textpos = text.get_rect(left=xstart,
        #                         top=ystart)
        # screen.blit(text, textpos)

        # if num_turbines >= max_turbines:
        #     text = self.fonts.types['medium'].render("All turbines placed!",
        #                                              True,
        #                                              self.colors.black)
        #     screen.blit(text, [textpos[0], textpos[1] + self.yoffset])

        # Power
        xstart = 0.5 * pygame.display.get_surface().get_width()
        ystart = 0.15 * pygame.display.get_surface().get_height()
        scaling_factor = 100
        text = self.fonts.types['medium'].render(
            "Power produced: {0:.2f} kW".format(scaling_factor * power),
            True,
            self.colors.black)
        textpos = text.get_rect(centerx=xstart,
                                top=ystart)
        screen.blit(text, textpos)

        # Instructions
        xstart = 0.97 * pygame.display.get_surface().get_width()
        ystart = 0.9 * pygame.display.get_surface().get_height()

        text = self.fonts.types['medium'].render("[t] to toggle",
                                                 True,
                                                 self.colors.black)
        textpos = text.get_rect(right=xstart,
                                bottom=ystart)
        screen.blit(text, textpos)
        text = self.fonts.types['medium'].render("[u] to undo  ",
                                                 True,
                                                 self.colors.black)
        textpos = text.get_rect(right=xstart,
                                bottom=ystart)
        screen.blit(text, [textpos[0], textpos[1] + self.yoffset])
        text = self.fonts.types['medium'].render("[r] to reset ",
                                                 True,
                                                 self.colors.black)
        textpos = text.get_rect(right=xstart,
                                bottom=ystart)
        screen.blit(text, [textpos[0], textpos[1] + 2 * self.yoffset])
        text = self.fonts.types['medium'].render("[q] to quit  ",
                                                 True,
                                                 self.colors.black)
        textpos = text.get_rect(right=xstart,
                                bottom=ystart)
        screen.blit(text, [textpos[0], textpos[1] + 3 * self.yoffset])
